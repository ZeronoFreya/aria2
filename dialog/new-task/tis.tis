// include "../../tis/common.tis";
self.ready = function() {
    $(#window-caption).text = "粘贴地址或拖入Bt文件";
    $(#new-task-path).state.focus = false;

//     //设置窗口居中
//     setWinToCenter();
//     view.windowTopmost = true;
//     // var h = $(header).box(#height, #border, #view);
//     // setMinSize( 320,197.76 );
//     // 加载或刷新deBug？
//     $(#window-debug).on("click",function(){
//         Sciter.launch( "inspector.exe" );
//         view.connectToInspector($(html));
//     });
//     // var ul = $(#ul);
//     // for(var i=0;i<100;i++){
//     //     ul.$append(<li>{i}</li>);
//     // }
//     // ul.postEvent("is-scroll");
    $(#custom-download-path).on("focusout",function(){
        $(#preview-download-path).text = this.text;
        this.parent.@.removeClass("custom-mode");
    })
    // $(#body).style#height = $(#nt-input-group).box(#height, #border, #self);
    // var padding_b = $(section#body).style["padding-bottom"].toFloat(#px);
    // var padding_t = $(#nt-input-group).style["padding-top"].toFloat(#px);
    // var padding_b = $(#nt-input-group).style["padding-bottom"].toFloat(#px);
    // $(#nt-input-group).onSize = function(){
    //     var h = this.box(#height, #border, #self);
    //     this.parent.style#height = px(h + padding_b);
    //     // stdout.println("r",h);
    // }


    // $(nav#select-save-path popup).on()
    // $(nav#select-save-path) << event mousedown
    //   {
    //     if(!this.state.ownspopup) {
    //       var anchorPoint = 1;
    //       var popupPoint = 1;
    //       this.popup( this.$(popup), (popupPoint << 16) | anchorPoint);
    //     }
    //   }

    //   // close popup on mouseup inside it
    //   event ~mouseup $(popup) {
    //     this.state.popup = false;
    //   }
}
view.windowTopmost = true;
include "virtual-tree.tis";
include "../../tis/decorators.tis";
include "../../tis/jsonrpc.tis";
// var rpc = view.parameters;
var rpc = new JsonRPC( "http://localhost:6800/jsonrpc" );
var rsData = {
    "gid":0
};
@click @on "#close-dialog" :: view.close( rsData );
// @click @on "#cancel-dialog" :: view.close( null );
@click @on "#show-cfg" :{
    $(#nt-input-group).@.addClass("translate-up");
    $(#nt-cfg-group).@.removeClass("translate-dn");
    var (xs,ys,ws,hs) = view.screenBox(#workarea,#rectw);
    var (wx,wy,ww,wh) = view.box(#rectw, #border, #screen);
    var new_h = (ww * 1.618).toInteger();
    var min_y = 0;
    var max_y = hs - new_h;
    wy = wy - (new_h - wh)/2;
    wy = wy < min_y ? min_y : wy;
    wy = wy > max_y ? max_y : wy;
    view.move(wx, wy, ww, new_h);
    // $(#body).style#height = $(#nt-cfg-group).box(#height, #border, #self);

    rpc.addTorrent( $(#new-task-path).text.trim(), function(gid, list){
        rsData.gid = gid;
        var data = creatDataJson("r:/", list);
        // stdout.println(gid,JSON.stringify(data,"  "));
        creatTree( data );
        $(widget#tree-list).clear().append(html);
    });
};
@click @on "#show-path" :{
    $(#nt-input-group).@.removeClass("translate-up");
    $(#nt-cfg-group).@.addClass("translate-dn");
    var (xs,ys,ws,hs) = view.screenBox(#workarea,#rectw);
    var (wx,wy,ww,wh) = view.box(#rectw, #border, #screen);
    var new_h = (ww * 0.618).toInteger();
    wy = wy + (wh - new_h)/2;
    view.move(wx, wy, ww, new_h);
    // $(#body).style#height = $(#nt-input-group).box(#height, #border, #self);
};
@click @on "#preview-download-path" :{
    // var _this = $(#preview-download-path);
    $(#nt-savepath .container).@.addClass("custom-mode");
    $(#custom-download-path).state.focus = true;
    $(#custom-download-path).text = $(#preview-download-path).text;
};
@click @on "#testnav" :{
    stdout.println("dd");
};
@click @on "option" :{
    stdout.println("dd");
};

var html = "";
function sortJsonKey( data ){
  var a = [];
  for(var k in data)
      a.push( k );
  return a.sort();
}
function creatTree( data ){
    var _f = {};
    if( data.exists("_f") ){
        _f = data["_f"].clone();
        data.remove("_f");
    }
    var kSort = this.sortJsonKey( data );
    for( var k in kSort ){
        html += "<option><caption.container><i></i><checkbox><text>" + k + "</text></checkbox></caption><section.content>";
        this.creatTree(data[k]);
        html += "</section></option>";
    }
    kSort = this.sortJsonKey( _f );
    for( var k in kSort){
        html += "<caption><checkbox.ck><text>" + k + "</text></checkbox></caption>";
    }
}
function creatDataJson(root, rs){
    var data = {"_f":{}};
    var _data = data;
    var pathSplit = [];
    var lastOfPathSplit = "";
    for(var v in rs){
        pathSplit = v.path.replace(root,"").split("/");
        lastOfPathSplit = pathSplit.pop();
        for( var i in pathSplit )
            _data = _data[i] ? _data[i] : _data[i] = {"_f":{}};
        _data["_f"][lastOfPathSplit] = { "index": v.index, "length": v.length, "selected": v.selected };
        _data = data;
    }
    return data;
}

function PopupTrigger() {
  var popup;
  var anchorPoint = 1;
  var popupPoint = 1;
  // if( var popupSelector = this.attributes["popup"] )
  //   popup = self.select(popupSelector);
  // if( !popup )
    popup = this.select("popup");

  assert popup : "PopupTrigger: popup not found";

  var popupShown = false;
  var me = this;
  var target, path;
  this << event click (evt) {
    target = evt.target;
    if( !target.belongsTo(this,false,true) )
      return false;
    if(popupShown){
        if (path = target.@#data-path) {
            $(#preview-download-path).text = path;
            // view.msgbox( #information, target.style#background-image.substr(7));
            this.$(i).style#background-image = "url("+target.style#background-image.substr(7)+")";
        }
      popup.state.popup = false;
    }
    else
      this.popup(popup, (popupPoint << 16) | anchorPoint );
  }

  popup << event popupready { popupShown = true; }
        << event popupdismissed { me.timer(500ms, ::popupShown = false); };

}
// class PathInput : Element
// {
//   function attached() {  this.update(this.attributes["value"]);  }

//   function update(path) {
//     this.$content(<caption value="{path}" /><button/>);
//   }

//   event focusout {
//     // reset content to show ellipsis
//     this.update(this.value);
//   }

//   property value(v) {
//     get return this.$(caption).text;
//     set this.update(v);
//   }

//   event click $(button)
//   {
//     var fn = view.selectFile(#open, "HTML Files (*.htm,*.html)|*.HTM;*.HTML|All Files (*.*)|*.*" , "html" );
//     if( fn ) this.update(fn);
//   }
// }
// $(widget[type=path] > caption>button).on("click",function(){
//     stdout.println("t");
//     $(widget[type=path]).@.addClass("path-edit");
// })
// class PathInput : Element{
//     var popupShown = false;
//     function attached() {
//       this.pop = this.select("popup");
//       this.anchorPoint = 1;
//       this.popupPoint = 1;
//     }
//     event click $(nav) {
//         // view.msgbox( #information, this.tag);
//         this.$(nav).popup(this.pop, (this.popupPoint << 16) | this.anchorPoint );
//     }
//     event click $(li) {
//         view.msgbox( #information, this.tag);
//     }
// }
class RsTree : VirtualTree
{
    function attached(){
        // stdout.println("876");
    }
}
class FileDropZone : Element
{
  event dragenter (evt)
  {
    if(evt.draggingDataType == #file)
    {
      this.attributes.addClass("active-target");
      return true;
    }
  }

  event dragleave (evt)
  {
    this.attributes.removeClass("active-target");
    return true;
  }

  event drag (evt)
  {
    if(evt.draggingDataType == #file)
    {
      // stdout.println(evt.x,evt.y);
      return true;
    }
  }

  event drop (evt)
  {
    if(evt.draggingDataType == #file)
    {
      this.attributes.removeClass("active-target");
      var fn = evt.dragging.substr(7);
      this.text = fn;
      // view.msgbox(#information, String.printf("Dropped:%V",fn));
      return true;
    }
  }

}