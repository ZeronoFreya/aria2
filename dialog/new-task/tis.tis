// include "../../tis/common.tis";
// self.ready = function() {
//     //设置窗口居中
//     setWinToCenter();
//     view.windowTopmost = true;
//     // var h = $(header).box(#height, #border, #view);
//     // setMinSize( 320,197.76 );
//     // 加载或刷新deBug？
//     $(#window-debug).on("click",function(){
//         Sciter.launch( "inspector.exe" );
//         view.connectToInspector($(html));
//     });
//     // var ul = $(#ul);
//     // for(var i=0;i<100;i++){
//     //     ul.$append(<li>{i}</li>);
//     // }
//     // ul.postEvent("is-scroll");
// }
view.windowTopmost = true;
include "../../tis/decorators.tis";

@click @on "#close-dialog" :: view.close( $(#new-task-path).value );
// @click @on "#cancel-dialog" :: view.close( null );
@click @on "#show-cfg" :{
    $(#nt-input-group).@.addClass("translate-up");
    $(#nt-cfg-group).@.removeClass("translate-dn");
};
@click @on "#show-path" :{
    $(#nt-input-group).@.removeClass("translate-up");
    $(#nt-cfg-group).@.addClass("translate-dn");
};

class PathInput : Element
{
  function attached() {  this.update(this.attributes["value"]);  }

  function update(path) { this.$content(<caption>{path}</caption><button/>);}

  event focusout {
    // reset content to show ellipsis
    this.update(this.value);
  }

  property value(v) {
    get return this.$(caption).text;
    set this.update(v);
  }

  event click $(button)
  {
    var fn = view.selectFile(#open, "HTML Files (*.htm,*.html)|*.HTM;*.HTML|All Files (*.*)|*.*" , "html" );
    if( fn ) this.update(fn);
  }
}
$(widget[type=path] > caption>button).on("click",function(){
    stdout.println("t");
    $(widget[type=path]).@.addClass("path-edit");
})