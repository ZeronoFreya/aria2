// include "../../+promise/promise.tis";

class JsonRPC // JSON RPC class using POST (application/json) requests
{
  function this( url , indicatorElement = self )
     //indicatorElement - DOM element to send requests through
  {
    this.indicator = indicatorElement;
    this.url = url;
    this.token = "abcd";
    this.aria2rpc = {
      "jsonrpc": "2.0",
      "id": "xxoo",
    }
  }

  function aaa( methodName, argv.. ){
    return {}.extend(this.aria2rpc, {
      "method": "aria2." + methodName.toString(),
      "params": argv
    });
  }
  async function showSomething(torrentPath)
  {
    try {
      var torrent = Bytes.load( torrentPath ).toString();
      var aria2rpc = this.aaa(
        "addTorrent",
        "token:"+this.token,
        torrent,
        [],
        {
            "pause":"true",
            "dir":"e:\\test"
        }
      );
      var rs = await this.indicator.request(#post-json, this.url , aria2rpc);
      var gid = rs.result;
      aria2rpc = this.aaa(
        "getFiles",
        "token:"+this.token,
        gid
      )
      rs = await this.indicator.request(#post-json, this.url , aria2rpc);
      stdout.println(gid,JSON.stringify(rs.result,"  "));
      // $(#test).text = id + data.result;

    } catch (err) {
      stdout.println("err",err);
    }
  }
  /*
  function showFiles( torrentPath, fn ){

    var _this = this;
    var torrent = Bytes.load( torrentPath ).toString();
    _this.post(
        "addTorrent",
        torrent,
        [],
        {
            "pause":"true",
            "dir":"e:\\test"
        }
    ).then(:data: _this.post(
        "getFiles",
        data.result
    )).then(fn,fn);
  }
*/

}