// include "../../+promise/promise.tis";

class JsonRPC // JSON RPC class using POST (application/json) requests
{
  function this( url , indicatorElement = self )
     //indicatorElement - DOM element to send requests through
  {
    this.indicator = indicatorElement;
    this.url = url;
    this.token = "abcd";
    this.aria2rpc = {
      "jsonrpc": "2.0",
      "id": "xxoo",
    }
  }

  function post( methodName, argv.. ){
    var aria2rpc = {}.extend(this.aria2rpc, {
      "method": "aria2." + methodName.toString(),
      "params": argv
    });
    return this.indicator.request(#post-json, this.url , aria2rpc);
  }
  function addTorrent( torrentPath, pause=true){
    var torrent = Bytes.load( torrentPath ).toString();
    this.__addTorrent( torrent, pause );
  }
  function getFiles( gid ){
    return this.post(
        "getFiles",
        "token:"+this.token,
        gid
    );
  }
  /*
  var html = "";
  function sortJsonKey( data ){
    var a = [];
    for(var k in data)
        a.push( k );
    return a.sort();
  }
  function creatTree( data ){
      var _f = {};
      if( data.exists("_f") ){
          _f = data["_f"].clone();
          data.remove("_f");
      }
      var kSort = this.sortJsonKey( data );
      for( var k in kSort ){
          html += "<option><caption.container><i></i><checkbox><text>" + k + "</text></checkbox></caption><section.content>";
          this.creatTree(data[k]);
          html += "</section></option>";
      }
      kSort = this.sortJsonKey( _f );
      for( var k in kSort){
          html += "<caption><checkbox.ck><text>" + k + "</text></checkbox></caption>";
      }
  }
  function creatDataJson(root, rs){
      var data = {"_f":{}};
      var _data = data;
      var pathSplit = [];
      var lastOfPathSplit = "";
      for(var v in rs){
          pathSplit = v.path.replace(root,"").split("/");
          lastOfPathSplit = pathSplit.pop();
          for( var i in pathSplit )
              _data = _data[i] ? _data[i] : _data[i] = {"_f":{}};
          _data["_f"][lastOfPathSplit] = { "index": v.index, "length": v.length, "selected": v.selected };
          _data = data;
      }
      return data;
  }
  function aaa(gid, list){
    var data = this.creatDataJson("e:/test/", list);
    stdout.println(gid,JSON.stringify(data,"  "));
    this.creatTree( data );
    $(widget#tree-list).clear().append(html);
  }
  async function __addTorrent(torrent, pause)
  {
    try {
      var rs = await this.post(
          "addTorrent", "token:"+this.token, torrent, [],
          {
              "pause": pause ? "true" : "false",
              "dir":"e:\\test"
          }
      );
      var gid = rs.result;
      rs = await this.getFiles(gid);
      // stdout.println(gid,JSON.stringify(rs.result,"  "));
      this.aaa(gid, rs.result);
    } catch (err) {
      stdout.println("err",err,JSON.stringify(err,"  "));
    }
  }
*/
}